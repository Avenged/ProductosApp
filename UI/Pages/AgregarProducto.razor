@page "/AgregarProducto"
@page "/ActualizarProducto/{Id:int}"
@page "/VerProducto/{Id:int}"

@using Application;
@using Application.DTOs;
@using ProductosApp.Data;

@inject NavigationManager NM
@inject NotificationService NS
@inject DialogService DialogService
@inject IProductService ProductService
@inject IMarcaService MarcaService

@if (accion == AccionABM.Ver)
{
    <PageTitle>Ver Productos</PageTitle>
}
else if (accion == AccionABM.Actualizar)
{
    <PageTitle>Actualizar Productos</PageTitle>
}
else
{
    <PageTitle>Agregar Productos</PageTitle>
}


@if (accion == AccionABM.Ver)
{
    <h3>Ver Producto</h3>
}
else if (accion == AccionABM.Actualizar)
{
    <h3>Actualizar Producto</h3>
}
else
{
    <h3>Agregar Producto</h3>
}

<RadzenTemplateForm Data="@productos">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Producto">
                    <RadzenStack Gap="1rem">

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Nombre" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Style="width: 100%;" Name="Name" ReadOnly="@(accion == AccionABM.Ver)" @bind-Value="@name" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Precio" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenNumeric Style="width: 100%;" Name="Precio" ReadOnly="@(accion == AccionABM.Ver)" @bind-Value="@precio" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Unidades" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenNumeric Style="width: 100%;" Name="Unidades" ReadOnly="@(accion == AccionABM.Ver)" @bind-Value="@unidades" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Marca" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown Style="width: 100%;" ReadOnly="@(accion == AccionABM.Ver)" TValue="int?" Data="marcas" TextProperty="@nameof(MarcaDTO.Nombre)" ValueProperty="@nameof(MarcaDTO.Id)" @bind-Value="marcaId" />
                            </RadzenColumn>
                        </RadzenRow>

                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        @if (accion != AccionABM.Ver)
        {
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" Click="@Submit" />
        }
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@Cancel" />
    </RadzenStack>
</RadzenTemplateForm>

@code {
    private IEnumerable<ProductoDTO> productos;
    private IEnumerable<MarcaDTO> marcas;

    public string name;
    public decimal precio;
    public int unidades;
    public int? marcaId;
    private AccionABM accion;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        marcas = await MarcaService.Obtener();

        if (NM.Uri.Contains("ActualizarProducto"))
        {
            accion = AccionABM.Actualizar;
            var producto = await ProductService.Obtener(Id);
            name = producto.Name;
            precio = producto.Precio;
            unidades = producto.Unidades;
            marcaId = producto.MarcaId;
        }
        else if (NM.Uri.Contains("VerProducto"))
        {
            accion = AccionABM.Ver;
            var producto = await ProductService.Obtener(Id);
            name = producto.Name;
            precio = producto.Precio;
            unidades = producto.Unidades;
            marcaId = producto.MarcaId;
        }
        else
        {
            accion = AccionABM.Crear;
        }
    }

    private async Task Submit()
    {
        if (accion == AccionABM.Crear)
        {
            var result = await DialogService.Confirm("Desea agregar el producto?", "Validacion", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });

            if (result == false || result is null)
            {
                return;
            }

            try
            {
                await ProductService.Agregar(name, precio, unidades, marcaId);

                NS.Notify(new NotificationMessage
                    {
                        Summary = "Operación exitosa",
                        Detail = "Producto agregado satisfactoriamente",
                        Severity = NotificationSeverity.Success,
                        Duration = 10000,
                    });
            }
            catch (InvalidOperationException ex)
            {
                NS.Notify(new NotificationMessage
                    {
                        Summary = "Error de validación",
                        Detail = $"{ex.Message}",
                        Severity = NotificationSeverity.Warning,
                        Duration = 10000,
                    });
            }
            catch (Exception ex)
            {
                NS.Notify(new NotificationMessage
                    {
                        Summary = "Ocurrió un error",
                        Detail = $"No se pudo agregar el producto. Contáctese con su administrador.",
                        Severity = NotificationSeverity.Error,
                        Duration = 10000,
                    });
            }
        }
        else
        {
            var result = await DialogService.Confirm("Desea actualizar el producto?", "Validacion", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });

            if (result == false || result is null)
            {
                return;
            }

            try
            {
                await ProductService.Actualizar(Id, name, precio, unidades, marcaId);

                NS.Notify(new NotificationMessage
                {
                    Summary = "Operación exitosa",
                    Detail = "Producto actualizado satisfactoriamente",
                    Severity = NotificationSeverity.Success,
                    Duration = 10000,
                });
            }
            catch (InvalidOperationException ex)
            {
                NS.Notify(new NotificationMessage
                {
                    Summary = "Error de validación",
                    Detail = $"{ex.Message}",
                    Severity = NotificationSeverity.Warning,
                    Duration = 10000,
                });
        }
            catch (Exception ex)
            {
                NS.Notify(new NotificationMessage
                {
                    Summary = "Ocurrió un error",
                    Detail = $"No se pudo actualizar el producto. Contáctese con su administrador.",
                    Severity = NotificationSeverity.Error,
                    Duration = 10000,
                });
            }
        }

        NM.NavigateTo("/");
    }

    void Cancel()
    {
        NM.NavigateTo("/");
    }

}
